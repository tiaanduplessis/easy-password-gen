{"version":3,"file":"easy-password-gen.m.js","sources":["../src/index.js"],"sourcesContent":["import randomBytes from 'randombytes'\n\nconst sets = {\n  lowercase: 'abcdefghijklmnopqrstuvwxyz',\n  uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  numbers: '0123456789',\n  symbols: '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~'\n}\n\nconst defaultOpts = {\n  size: 256,\n  length: 12,\n  lowercase: false,\n  uppercase: false,\n  numbers: true,\n  symbols: true\n}\n\nfunction generatePassword (opts = {}) {\n  const {\n    size = 256,\n    length = 12,\n    ...pools\n  } = Object.assign({}, defaultOpts, opts)\n  const rb = randomBytes(size)\n\n  let pool = ''\n  let password = ''\n\n  Object.keys(pools).forEach(type => {\n    if (pools[type]) { pool += sets[type] }\n  })\n\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * size)\n    password += pool[rb[index] % pool.length]\n  }\n  return password\n}\n\nexport default generatePassword\n"],"names":["sets","lowercase","uppercase","numbers","symbols","defaultOpts","size","length","opts","Object","assign","rb","randomBytes","pool","password","keys","pools","forEach","type","let","i","index","Math","floor","random"],"mappings":"2BAAA,IAEMA,EAAO,CACXC,UAAW,6BACXC,UAAW,6BACXC,QAAS,aACTC,QAAS,kCAGLC,EAAc,CAClBC,KAAM,IACNC,OAAQ,GACRN,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,SAAS,kBAGX,SAA2BI,kBAAO,UAK5BC,OAAOC,OAAO,GAAIL,EAAaG,2BAH1B,mCACE,yJAGLG,EAAKC,EAAYN,GAEnBO,EAAO,GACPC,EAAW,GAEfL,OAAOM,KAAKC,GAAOC,iBAAQC,GACrBF,EAAME,KAASL,GAAQb,EAAKkB,UAG7BC,IAAIC,EAAI,EAAGA,EAAIb,EAAQa,IAAK,KACzBC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWlB,GACzCQ,GAAYD,EAAKF,EAAGU,GAASR,EAAKN,eAE7BO"}